Instance generator benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 29 ...
* computation with R = 30 ...
Instance generator benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\00 Instance generator benchmark.xlsx
Time taken for instance generator benchmark: 3.8444640999659896 seconds

Brute force enumerator benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
Brute force enumerator benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\01 Brute force enumerator benchmark.xlsx
Time taken for brute force enumerator benchmark: 31720.0219352 seconds

Oneil Hoffman enumerator benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
Oneil Hoffman enumerator benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\02 Oneil Hoffman enumerator benchmark.xlsx
Time taken for oneil hoffman enumerator benchmark: 12347.941715199966 seconds

Greedy Pickup First benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Greedy Pickup First benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\03 Greedy Pickup First benchmark.xlsx
Time taken for greedy pickup first benchmark: 2.0932680999976583 seconds

Greedy Request Order benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Greedy Request Order benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\04 Greedy Request Order benchmark.xlsx
Time taken for greedy request order benchmark: 2.3669036000064807 seconds

Greedy Nearest Neighbor benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Greedy Nearest Neighbor benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\05 Greedy Nearest Neighbor benchmark.xlsx
Time taken for greedy nearest neighbor benchmark: 36.13214489999518 seconds

Greedy Random benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Greedy Random benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\06 Greedy Random benchmark.xlsx
Time taken for greedy random benchmark: 1.71261190000223 seconds

Greedy best solutions:
* for R = 2 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 1 -> 4 -> 3 -> 0 and cost 179.0
* for R = 3 the best solution is obtained with Greedy Pickup First with solution path: 0 -> 1 -> 3 -> 2 -> 4 -> 5 -> 6 -> 0 and cost 282.0
* for R = 4 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 4 -> 1 -> 3 -> 8 -> 7 -> 6 -> 5 -> 0 and cost 233.0
* for R = 5 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 1 -> 2 -> 4 -> 9 -> 6 -> 5 -> 7 -> 3 -> 8 -> 10 -> 0 and cost 354.0
* for R = 6 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 6 -> 5 -> 11 -> 12 -> 8 -> 1 -> 7 -> 4 -> 10 -> 3 -> 9 -> 0 and cost 281.0
* for R = 7 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 7 -> 3 -> 5 -> 1 -> 6 -> 14 -> 10 -> 9 -> 4 -> 12 -> 13 -> 8 -> 11 -> 0 and cost 379.0
* for R = 8 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 4 -> 12 -> 8 -> 1 -> 9 -> 16 -> 6 -> 14 -> 3 -> 11 -> 2 -> 7 -> 15 -> 10 -> 5 -> 13 -> 0 and cost 478.0
* for R = 9 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 6 -> 4 -> 5 -> 3 -> 1 -> 14 -> 12 -> 10 -> 7 -> 15 -> 8 -> 13 -> 9 -> 2 -> 11 -> 18 -> 17 -> 16 -> 0 and cost 333.0
* for R = 10 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 3 -> 8 -> 5 -> 4 -> 13 -> 10 -> 6 -> 15 -> 1 -> 20 -> 16 -> 11 -> 7 -> 2 -> 12 -> 9 -> 19 -> 14 -> 17 -> 18 -> 0 and cost 302.0
* for R = 11 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 11 -> 3 -> 22 -> 1 -> 8 -> 4 -> 12 -> 2 -> 5 -> 6 -> 13 -> 19 -> 10 -> 15 -> 14 -> 21 -> 16 -> 9 -> 20 -> 7 -> 18 -> 17 -> 0 and cost 524.0
* for R = 12 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 5 -> 1 -> 3 -> 9 -> 15 -> 21 -> 10 -> 11 -> 23 -> 17 -> 13 -> 22 -> 2 -> 8 -> 4 -> 20 -> 16 -> 14 -> 7 -> 6 -> 18 -> 12 -> 19 -> 24 -> 0 and cost 330.0
* for R = 13 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 10 -> 3 -> 13 -> 8 -> 9 -> 12 -> 25 -> 6 -> 21 -> 23 -> 2 -> 1 -> 7 -> 11 -> 15 -> 14 -> 20 -> 16 -> 5 -> 4 -> 24 -> 26 -> 18 -> 19 -> 22 -> 17 -> 0 and cost 432.0
* for R = 14 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 11 -> 13 -> 1 -> 4 -> 14 -> 5 -> 18 -> 10 -> 8 -> 19 -> 27 -> 9 -> 24 -> 28 ->6 -> 20 -> 15 -> 12 -> 2 -> 3 -> 17 -> 16 -> 23 -> 25 -> 26 -> 22 -> 7 -> 21 -> 0 and cost 563.0
* for R = 15 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 10 -> 12 -> 1 -> 13 -> 14 -> 2 -> 29 -> 28 -> 27 -> 8 -> 3 -> 18 -> 17 -> 6 -> 15 -> 5 -> 9 -> 21 -> 23 -> 4 -> 11 -> 19 -> 7 -> 30 -> 20 -> 26 -> 22 -> 16 -> 24 -> 25 -> 0 and cost 420.0
* for R = 16 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 1 -> 15 -> 17 -> 5 -> 7 -> 9 -> 16 -> 23 -> 4 -> 10 -> 6 -> 20 -> 8 -> 26 -> 12 -> 13 -> 2 -> 14 -> 21 -> 32 -> 29 -> 24 -> 30 -> 25 -> 31 -> 3 -> 18 -> 11 -> 28 -> 27 -> 22 -> 19 -> 0 and cost 430.0
* for R = 17 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 10 -> 5 -> 8 -> 9 -> 2 -> 16 -> 17 -> 1 -> 25 -> 7 -> 3 -> 15 -> 6 -> 18 -> 24 -> 14 -> 27 -> 23 -> 20 -> 4 -> 22 -> 33 -> 21 -> 19 -> 11 -> 34 -> 12 -> 13 -> 28 -> 30 -> 31 -> 29 -> 32 -> 26 -> 0 and cost 536.0
* for R = 18 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 5 -> 17 -> 15 -> 7 -> 11 -> 9 -> 3 -> 27 -> 35 -> 4 -> 6 -> 2 -> 20 -> 12 -> 1 -> 30 -> 24 -> 8 -> 22 -> 13 -> 21 -> 25 -> 10 -> 19 -> 18 -> 14 -> 32 -> 26 -> 16 -> 36 -> 29 -> 34 -> 31 -> 33 -> 23 -> 28 -> 0 and cost 369.0
* for R = 19 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 9 -> 8 -> 10 -> 19 -> 13 -> 12 -> 15 -> 29 -> 1 -> 14 -> 31 -> 3 -> 17 -> 28 -> 20 -> 11 -> 30 -> 4 -> 23 -> 16 -> 27 -> 5 -> 2 -> 22 -> 32 -> 36 -> 21 -> 38 -> 18 -> 34 -> 6 -> 7 -> 26 -> 24 -> 35 -> 25 -> 33 -> 37 -> 0 and cost 350.0
* for R = 20 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 17 -> 18 -> 9 -> 29 -> 4 -> 6 -> 37 -> 3 -> 10 -> 19 -> 20 -> 11 -> 14 -> 38 -> 22 -> 24 -> 23 -> 40 -> 15 -> 31 -> 16 -> 8 -> 1 -> 36 -> 39 -> 26 -> 35 -> 28 -> 7 -> 13 -> 34 -> 12 -> 32 -> 33 -> 5 -> 21 -> 30 -> 25 -> 27 -> 0 and cost 528.0
* for R = 21 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 15 -> 4 -> 6 -> 25 -> 20 -> 12 -> 18 -> 36 -> 5 -> 41 -> 16 -> 8 -> 1 -> 7 -> 37 -> 26 -> 17 -> 38 -> 13 -> 39 -> 2 -> 14 -> 19 -> 10 -> 21 -> 9 -> 28 -> 11 -> 32 -> 22 -> 29 -> 23 -> 3 -> 24 -> 34 -> 33 -> 30 -> 42 -> 40 -> 27 -> 35 -> 31 -> 0 and cost 652.0
* for R = 22 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 6 -> 8 -> 7 -> 3 -> 10 -> 22 -> 29 -> 17 -> 5 -> 20 -> 32 -> 19 -> 27 -> 1 -> 2 -> 9 -> 13 -> 41 -> 12 -> 44 -> 15 -> 18 -> 31 -> 34 -> 11 -> 28 -> 14 -> 25 -> 24 -> 37 -> 16 -> 21 -> 30 -> 4 -> 38 -> 33 -> 23 -> 35 -> 40 -> 42 -> 26 -> 36 -> 43 -> 39 -> 0 and cost 581.0
* for R = 23 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 4 -> 20 -> 1 -> 6 -> 11 -> 17 -> 14 -> 2 -> 18 -> 37 -> 10 -> 13 -> 24 -> 27 -> 16 -> 5 -> 7 -> 22 -> 21 -> 28 -> 15 -> 34 -> 38 -> 41 -> 30 -> 8 -> 43 -> 3 -> 12 -> 29 -> 35 -> 25 -> 19 -> 23 -> 42 -> 9 -> 44 -> 26 -> 32 -> 36 -> 46 -> 40 -> 45 -> 31 -> 33 -> 39 -> 0 and cost 508.0
* for R = 24 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 7 -> 11 -> 35 -> 10 -> 9 -> 6 -> 16 -> 19 -> 14 -> 24 -> 43 -> 40 -> 21 -> 23 -> 3 -> 31 -> 22 -> 48 -> 2 -> 4 -> 33 -> 20 -> 34 -> 18 -> 45 -> 47 -> 13 -> 12 -> 8 -> 46 -> 5 -> 26 -> 44 -> 30 -> 36 -> 38 -> 29 -> 37 -> 27 -> 28 -> 1 -> 42 -> 25 -> 15 -> 39 -> 17 -> 32 -> 41 -> 0 and cost 515.0
* for R = 25 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 4 -> 3 -> 22 -> 11 -> 13 -> 1 -> 7 -> 17 -> 20 -> 24 -> 18 -> 23 -> 12 -> 36 -> 16 -> 49 -> 42 -> 48 -> 43 -> 41 -> 19 -> 38 -> 37 -> 6 -> 26 -> 15 -> 44 -> 10 -> 9 -> 32 -> 29 -> 40 -> 25 -> 45 -> 47 -> 28 -> 34 -> 31 -> 35 -> 27 -> 14 -> 39 -> 5 -> 8 -> 21 -> 50 -> 46 -> 30 -> 33 -> 0 and cost 588.0
* for R = 26 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 21 -> 5 -> 13 -> 2 -> 14 -> 7 -> 18 -> 10 -> 17 -> 3 -> 36 -> 43 -> 31 -> 9 -> 28 -> 11 -> 37 -> 47 -> 35 -> 19 -> 25 -> 1 -> 33 -> 6 -> 44 -> 12 -> 45 -> 29 -> 16 -> 39 -> 42 -> 51 -> 8 -> 32 -> 20 -> 38 -> 4 -> 15 -> 23 -> 24 -> 49 -> 46 -> 26 -> 34 -> 41 -> 50 -> 27 -> 30 -> 40 -> 52 -> 22 -> 48 -> 0 and cost 418.0
* for R = 27 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 5 -> 18 -> 16 -> 14 -> 7 -> 15 -> 4 -> 6 -> 33 -> 2 -> 3 -> 25 -> 19 -> 1 -> 26 -> 24 -> 11 -> 51 -> 29 -> 23 -> 46 -> 12 -> 32 -> 22 -> 52 -> 43 -> 34 -> 9 -> 21 -> 39 -> 10 -> 49 -> 8 -> 17 -> 31 -> 20 -> 42 -> 27 -> 30 -> 53 -> 35 -> 36 -> 45 -> 13 -> 44 -> 28 -> 54 -> 47 -> 41 -> 40 -> 38 -> 48 -> 37 -> 50 -> 0 and cost 406.0
* for R = 28 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 10 -> 4 -> 16 -> 9 -> 26 -> 21 -> 11 -> 17 -> 39 -> 12 -> 23 -> 14 -> 25 -> 6 -> 44 -> 37 -> 28 -> 20 -> 5 -> 48 -> 51 -> 53 -> 42 -> 22 -> 54 -> 19 -> 15 -> 38 -> 50 -> 18 -> 34 -> 27 -> 40 -> 56 -> 3 -> 47 -> 31 -> 49 -> 24 -> 33 -> 32 -> 43 -> 13 -> 41 -> 2 -> 55 -> 52 -> 7 -> 46 -> 45 -> 30 -> 35 -> 1 -> 29 -> 8 -> 36 -> 0 and cost 614.0
* for R = 29 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 21 -> 8 -> 50 -> 22 -> 18 -> 29 -> 28 -> 9 -> 7 -> 4 -> 16 -> 11 -> 24 -> 36 -> 58 -> 5 -> 12 -> 53 -> 51 -> 2 -> 6 -> 45 -> 1 -> 13 -> 25 -> 47 -> 15 -> 26 -> 23 -> 14 -> 40 -> 17 -> 31 -> 52 -> 46 -> 55 -> 37 -> 38 -> 54 -> 34 -> 42 -> 44 -> 10 -> 30 -> 39 -> 33 -> 19 -> 3 -> 43 -> 27 -> 35 -> 48 -> 57 -> 41 -> 20 -> 49 -> 32 -> 56 -> 0 and cost 501.0
* for R = 30 the best solution is obtained with Greedy Nearest Neighbor with solution path: 0 -> 2 -> 9 -> 7 -> 18 -> 13 -> 32 -> 10 -> 26 -> 27 -> 20 -> 15 -> 22 -> 5 -> 19 -> 14 -> 40 -> 21 -> 8 -> 16 -> 48 -> 50 -> 3 -> 43 -> 4 -> 17 -> 30 -> 11 -> 41 -> 35 -> 25 -> 52 -> 60 -> 37 -> 24 -> 29 -> 6 -> 1 -> 31 -> 46 -> 36 -> 49 -> 12 -> 38 -> 47 -> 42 -> 55 -> 54 -> 45 -> 23 -> 39 -> 51 -> 59 -> 44 -> 34 -> 56 -> 33 -> 57 -> 28 -> 58 -> 53 -> 0 and cost 557.0

City Insert benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
City Insert benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\07 City Insert benchmark.xlsx
Time taken for city insert benchmark: 2997.9329253998585 seconds

City Swap benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
City Swap benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\08 City Swap benchmark.xlsx
Time taken for city swap benchmark: 2211.317351799924 seconds

Simulated Annealing benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Simulated Annealing benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\09 Simulated Annealing benchmark.xlsx
Time taken for simulated annealing benchmark: 1114.2895513999974 seconds

Tabu Search benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Tabu Search benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\10 Tabu Search benchmark.xlsx
Time taken for tabu search benchmark: 26581.362874299986 seconds

Large Neighborhood Search benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Large Neighborhood Search benchmark
- END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\11 Large Neighborhood Search benchmark.xlsx
Time taken for large neighborhood search benchmark: 41056.14006799995 seconds

Multi Start Local Search benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Multi Start Local Search benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\12 Multi Start Local Search benchmark.xlsx
Time taken for multi start local search benchmark: 13386.291639900068 seconds

Greedy Randomized Adaptive Search Procedure benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Greedy Randomized Adaptive Search Procedure benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\13 Greedy Randomized Adaptive Search Procedure benchmark.xlsx
Time taken for greedy randomized adaptive search procedure benchmark: 16765.102690199856 seconds

Greedy Randomized Adaptive Search Procedure with Path Relinking benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Greedy Randomized Adaptive Search Procedure with Path Relinking benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\14 Greedy Randomized Adaptive Search Procedure with Path Relinking benchmark.xlsx
Time taken for greedy randomized adaptive search procedure with path relinking benchmark: 84467.26572320005 seconds

Genetic Algorithm benchmark - START
* computation with R = 2 ...
* computation with R = 3 ...
* computation with R = 4 ...
* computation with R = 5 ...
* computation with R = 6 ...
* computation with R = 7 ...
* computation with R = 8 ...
* computation with R = 9 ...
* computation with R = 10 ...
* computation with R = 11 ...
* computation with R = 12 ...
* computation with R = 13 ...
* computation with R = 14 ...
* computation with R = 15 ...
* computation with R = 16 ...
* computation with R = 17 ...
* computation with R = 18 ...
* computation with R = 19 ...
* computation with R = 20 ...
* computation with R = 21 ...
* computation with R = 22 ...
* computation with R = 23 ...
* computation with R = 24 ...
* computation with R = 25 ...
* computation with R = 26 ...
* computation with R = 27 ...
* computation with R = 28 ...
* computation with R = 29 ...
* computation with R = 30 ...
Genetic Algorithm benchmark - END
See the results on: C:\dev\TSP-con-pick-up-and-delivery\doc\benchmark\15 Genetic Algorithm benchmark.xlsx
Time taken for genetic algorithm benchmark: 113706.11896840001 seconds